# -*- coding: utf-8 -*-
"""p36.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aukUnlYpYSQyeYcQyJqHSqYrzQKxk3kB
"""

import scipy.io as sio
import torch
import numpy as np
import torch.utils.data as utils
from __future__ import print_function
from __future__ import division
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy



train_X = sio.loadmat('train_X_csp.mat')['train_X_csp']
train_y = sio.loadmat('train_y.mat')['train_y_csp']
 
test_X = sio.loadmat('test_X_csp.mat')['test_X_csp']
test_y = sio.loadmat('test_y.mat')['test_y']

train_X = np.expand_dims(train_X, axis=0)
train_X = np.moveaxis(train_X, -1, 0)

test_X = np.expand_dims(test_X, axis=0)
test_X = np.moveaxis(test_X, -1, 0)

train_y = train_y[0]
test_y = test_y[0]

train_y = train_y.T
test_y = test_y.T



X_train_list = []
for i in range(len(train_X)):
    X_train_list.append(train_X[i])
X_test_list = []
for i in range(len(test_X)):
    X_test_list.append(test_X[i])

tensor_X_train = torch.stack([torch.FloatTensor(i) for i in X_train_list]) # transform to torch tensors
tensor_y_train = torch.Tensor(train_y)

tensor_X_test = torch.stack([torch.FloatTensor(i) for i in X_test_list]) # transform to torch tensors
tensor_y_test = torch.Tensor(test_y)

import theano
import theano.tensor as T
from theano.tensor import fft
tensor_X_train = fft.rfft(tensor_X_train)
tensor_X_test = fft.rfft(tensor_X_test)



train_dataset = utils.TensorDataset(tensor_X_train,tensor_y_train)
train_loader = utils.DataLoader(train_dataset, batch_size=32, num_workers=1)

test_dataset = utils.TensorDataset(tensor_X_test,tensor_y_test)
test_loader = utils.DataLoader(test_dataset, batch_size=32, num_workers=1)

from torch import nn

def conv_calc(w,k,p,s):
    o = (w-k+2*p)/s + 1      #k-filter size, w-height,width p-padding s- stride
    return o
conv_calc(4,3,0,1)

import torch.nn.functional as F
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, 1,1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1,1)
        #self.fc1 = nn.Linear(8672, 2)
        self.fc1 = nn.Linear(64*6*275, 2)
        
        self.fc2 = nn.Linear(100,2)
        self.drop = nn.Dropout(p = 0.5)
        self.bn1 = nn.BatchNorm2d(32)
        self.bn2 = nn.BatchNorm2d(64)
    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.relu(x)
        x = self.drop(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x = F.relu(x)
        
        x = x.view(-1, 64*6*275)
        x = self.drop(x)
        #self.fc1(x)
        #x = self.drop(x)
      
        
        return self.fc1(x)   
        
net = Net()
print(net)

from torch import nn
from torch import optim
criterion = nn.CrossEntropyLoss()
#criterion = nn.BCEWithLogitsLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

def train_model(model, dataloaders, criterion, optimizer, num_epochs=25):
    since = time.time()

    val_acc_history = []
    train_acc_history = [] 
    epoch_number = []
    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            epoch_number.append(epoch)    

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs
                labels = labels

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    # Get model outputs and calculate loss
                    # Special case for inception because in training it has an auxiliary output. In train
                    #   mode we calculate the loss by summing the final output and the auxiliary output
                    #   but in testing we only consider the final output.
                  
                    outputs = model(inputs.float())
                    
                    loss = criterion(outputs, labels.long())
                    
                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)
            

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
            if phase == 'val':
                val_acc_history.append(epoch_acc)
                scheduler.step(epoch_loss)
            if phase == 'train':
                train_acc_history.append(epoch_acc)
                
        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, val_acc_history,epoch_number,train_acc_history

dataloaders_dict = {"train": train_loader, "val": test_loader}

#device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
params_to_update = net.parameters()
optimizer_ft = optim.Adam(params_to_update, lr=3e-3)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer_ft, factor=0.1, patience=5, verbose=True)
mod,val,epo,trainig = train_model(net,dataloaders_dict,criterion, optimizer_ft)

net.eval()
testy = []
lr_probs = []
with torch.no_grad():
    for data in test_loader:
        inputs, labels = data[0], data[1]
        outputs = net(inputs)
        testy.extend(labels)
        lr_probs.extend(nn.functional.softmax(outputs,dim=1).cpu().numpy())

y_pred = np.asarray(lr_probs)
fpr, tpr, threshold = metrics.roc_curve(test_y.T, y_pred.T[1])
roc_auc = metrics.auc(fpr, tpr)



# method I: plt
import matplotlib.pyplot as plt
plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

test_y.T[0]



























































































